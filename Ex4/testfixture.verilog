
// Verilog stimulus file.
// Please do not create a module in this file.


// Default verilog stimulus. 

initial
begin 

     // test AND operation
     ALUControl[3:0] = 4'b0000;

     A[31:0] = 32'b00000000000000000000000000000000;
     B[31:0] = 32'b00000000000000000000000000000000;
     #30

     A[31:0] = 32'b00001111000011110000111100001111;
     B[31:0] = 32'b11110000111100001111000011110000;
     #30
      
     A[31:0] = 32'b11110000111100001111000011110000;
     B[31:0] = 32'b00001111000011110000111100001111;
     #30

     A[31:0] = 32'b11111111111111111111111111111111;
     B[31:0] = 32'b11111111111111111111111111111111;
     #30

     A[31:0] = 32'b11011000101000111011100011010100;
     B[31:0] = 32'b01100011101110011101011011110010;
     #30

     // test OR operation
     ALUControl[3:0] = 4'b0001;

     A[31:0] = 32'b00000000000000000000000000000000;
     B[31:0] = 32'b00000000000000000000000000000000;
     #30

     A[31:0] = 32'b00001111000011110000111100001111;
     B[31:0] = 32'b11110000111100001111000011110000;
     #30
      
     A[31:0] = 32'b11110000111100001111000011110000;
     B[31:0] = 32'b00001111000011110000111100001111;
     #30

     A[31:0] = 32'b11111111111111111111111111111111;
     B[31:0] = 32'b11111111111111111111111111111111;
     #30

     A[31:0] = 32'b11011000101000111011100011010100;
     B[31:0] = 32'b01100011101110011101011011110010;
     #30

     // test ADD operation
     ALUControl[3:0] = 4'b0010;
   
     A[31:0] = 32'b00000000000000000000000000000000;
     B[31:0] = 32'b00000000000000000000000000000000;
     #30

     A[31:0] = 32'b00001111000011110000111100001111;
     B[31:0] = 32'b11110000111100001111000011110000;
     #30
      
     A[31:0] = 32'b01111111111111111111111111111111;
     B[31:0] = 32'b00000000000000000000000000000001;
     #30

     A[31:0] = 32'b11111111111111111111111111111111;
     B[31:0] = 32'b00000000000000000000000000000001;
     #30

     A[31:0] = 32'b11011000101000111011100011010100;
     B[31:0] = 32'b01100011101110011101011011110010;
     #30

     // test SUB operation
     ALUControl[3:0] = 4'b0110;
   
     A[31:0] = 32'b00000000000000000000000000000000;
     B[31:0] = 32'b00000000000000000000000000000000;
     #30

     A[31:0] = 32'b00000000000000000000000000000000;
     B[31:0] = 32'b00000000000000000000000000000001;
     #30
      
     A[31:0] = 32'b00000000000000000000000000000001;
     B[31:0] = 32'b10000000000000000000000000000001;
     #30

     A[31:0] = 32'b00000000000000000000000000000001;
     B[31:0] = 32'b00000000000000000000000000000001;
     #30

     A[31:0] = 32'b11011000101000111011100011010100;
     B[31:0] = 32'b01100011101110011101011011110010;
     #30

     // test SLT operation
     ALUControl[3:0] = 4'b0111;

     A[31:0] = 32'b00000000000000000000000000000000;
     B[31:0] = 32'b00000000000000000000000000000000;
     #30

     A[31:0] = 32'b00000000000000000000000000000000;
     B[31:0] = 32'b00000000000000000000000000000001;
     #30
      
     A[31:0] = 32'b00000000000000000000000000000001;
     B[31:0] = 32'b10000000000000000000000000000001;
     #30

     A[31:0] = 32'b00000000000000000000000000000001;
     B[31:0] = 32'b00000000000000000000000000000001;
     #30

     A[31:0] = 32'b11011000101000111011100011010100;
     B[31:0] = 32'b01100011101110011101011011110010;
     #30
       
 $finish;
end
   
